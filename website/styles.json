{
  "styles": [
    {
      "name": "Client-Server",
      "desc": "The client-server software architecture style is a network-based model in which client devices, such as desktop computers, laptops, or mobile devices, communicate with a central server over a network. In this architecture style, the client is the requesting device, and the server is the responding device. The client sends requests to the server for services or resources, and the server responds with the requested information. The server is responsible for providing services or resources to the client, such as data storage, application logic, or web content. The server may also perform data processing and calculations on behalf of the client. The client, on the other hand, is responsible for presenting the information to the user and performing user interactions. The client-server architecture style is widely used in web applications, where clients access web pages or web services through web browsers. It is also commonly used in enterprise applications, where multiple clients access a centralized database or application server. One of the primary benefits of the client-server architecture style is its scalability. By centralizing services and resources on a server, multiple clients can access the same information simultaneously. This makes it an ideal architecture style for large-scale applications that require high levels of availability, performance, and security.",
      "image": "static\\Image\\client_server.png"
    },
    {
      "name": "Main Program and Subroutine(s)",
      "desc": "This software architecture style is designed for small, relatively simple applications that can be modeled using two different parts, a main program and one or many subroutines. The main program serves as the entry point for the program and contains high-level logic for executing the program's tasks. Subroutines, on the other hand, are self-contained blocks of code that perform a specific task or set of related tasks. They can receive input parameters and return output values, making them flexible and reusable across different parts of the program. The Main Program and Subroutines architecture style is particularly useful for creating modular, maintainable code that can be easily updated and extended. It allows developers to write more efficient code and avoid duplicating code throughout the program. Subroutines can also be used in multiple programs, making them a valuable resource for software development teams.",
      "image": "static\\Image\\main_and_subroutines.png"
    },
    {
      "name": "Peer-To-Peer",
      "desc": "The peer-to-peer software architecture style is a distributed network model where all devices, or nodes, are connected and can communicate with each other on an equal footing. In this architecture style, each node can act as both a client and a server, sharing resources and services with other nodes on the network. In a peer-to-peer network, there is no central server, and all nodes are responsible for their own data storage, processing, and communication. Each node can request and provide services or resources to other nodes directly, without relying on a central authority. The peer-to-peer architecture style is often used in file-sharing applications, where users can share files with other users on the network. It is also used in distributed computing applications, where multiple nodes work together to perform complex computations. One of the primary benefits of the peer-to-peer architecture style is its scalability. As each node can provide resources and services to other nodes, the network can expand and contract dynamically as new nodes join or leave the network. This makes it an ideal architecture style for large-scale, decentralized applications. However, the peer-to-peer architecture style can also be challenging to implement and maintain, as there is no central authority to enforce rules or standards. It can also be less secure than other architecture styles, as nodes may not be trusted or authenticated.",
      "image":"static\\Image\\peer_to_peer.png"
    },
    {
      "name": "Pipe and Filter",
      "desc": "The pipe and filter software architecture style is a processing model where data is passed through a series of filters or processing steps, called pipes, before being outputted. In this architecture style, each pipe performs a specific task or transformation on the data, and the output of one pipe serves as the input to the next pipe in the sequence. The pipe and filter architecture style is often used for batch processing applications, where large amounts of data need to be processed in a sequential and predictable manner. It is also used in real-time data processing applications, such as audio or video processing. Each filter in the pipe and filter architecture style is typically designed to perform a single, well-defined task, making the system more modular and maintainable. Filters can be added, removed, or replaced without affecting the overall system, and the processing sequence can be customized to fit the specific needs of the application. One of the primary benefits of the pipe and filter architecture style is its scalability. By breaking down processing tasks into smaller, self-contained filters, the system can handle large amounts of data efficiently and in parallel. This makes it an ideal architecture style for applications that require high performance and throughput.",
      "image": "static\\Image\\pipe_and_filter.png"
    },
    {
      "name": "Batch Sequential",
      "desc": "The batch sequential software architecture style is a processing model where data is processed in sequential batches, one batch at a time. In this architecture style, each batch of data is processed independently, and the output of one batch serves as the input to the next batch in the sequence. The batch sequential architecture style is often used for applications that require large-scale data processing. It is also used in scientific and engineering applications, where large amounts of data need to be processed in a specific order. In the batch sequential architecture style, data is typically processed in three stages: input, processing, and output. During the input stage, data is collected from various sources and prepared for processing. In the processing stage, data is processed in sequential batches using a set of predefined rules or algorithms. Finally, in the output stage, the processed data is outputted to the desired destination, such as a file or database. One of the primary benefits of the batch sequential architecture style is its predictability and reliability. By processing data in sequential batches, the system can ensure that all data is processed consistently and correctly, without the need for complex error handling or recovery mechanisms.",
      "image": "static\\Image\\batch_sequential.png"
    },
    {
      "name": "Blackboard",
      "desc": "The blackboard software architecture style is a model where a central data structure, called the blackboard, is used to coordinate and communicate between independent and autonomous components of a system. In this architecture style, each component is responsible for monitoring and updating a specific part of the blackboard, and the system as a whole works to converge on a solution or outcome. The blackboard architecture style is often used in complex and dynamic systems, such as artificial intelligence or expert systems, where multiple knowledge sources and algorithms need to work together to solve a problem. In the blackboard architecture style, each component, or knowledge source, is typically designed to solve a specific part of the problem or contribute a specific type of knowledge to the system. Components can read and write to the blackboard as needed, and the system as a whole works to converge on a solution or outcome. One of the primary benefits of the blackboard architecture style is its flexibility and adaptability. The system can be modified and extended by adding or removing knowledge sources without affecting the overall system, making it easy to incorporate new knowledge or algorithms into the system.",
      "image": "static\\Image\\blackboard.png"
    },
    {
      "name": "Interpreter",
      "desc": "The interpreter software architecture style is a model where a software interpreter parses and executes the input stream, updating the state maintained by the interpreter. This architecture should be used when highly dynamic behavior is required and when needing a high degree of end-user customizability. However, this style should not be used when high performance is desired in one`s application.",
      "image":"static\\Image\\interpreter.png"
    },
    {
      "name": "Publish-Subscribe",
      "desc": "The publish-subscribe software architecture style is a model where a system consists of publishers that produce messages and subscribers that consume messages. The publish-subscribe architecture style is often used in situations where middleware to support high-volume data is unavailable. It allows for loose coupling of components, as publishers do not need to know who the subscribers are, and subscribers do not need to know who the publishers are. In the publish-subscribe architecture style, publishers broadcast messages to subscribers, either synchronously or asynchronously. Subscribers that have registered to receive those specific messages receive the messages. The publisher and subscriber do not need to be active at the same time, and there is no intermediary component involved in the communication.",
      "image":"static\\Image\\pub_sub.png"
    }
  ]
}